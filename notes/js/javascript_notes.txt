VARIABLES

Reference. Can be string, number, array, boolean, function.

CONDITIONAL STATEMENTS

if (<will execute if this part is true OR truthy>) {
  <this part will execute>
}

Javascript tries to be helpful by looking at what you're comparing and under certain
circumstances will consider things "truthy" or "falsey" when you use the comparison
operator "==". For example, if ("39" == 39) will execute, even though they are different
types. To avoid this, you can use "===" which analyzes value and type.

Function expression syntax. Function declaration syntax.

Javascript behaves as though these values are false:

empty string (not even a space)
0
false
null
undefined
NaN

Everything else gets treated as true

!!() converts contents to Boolean value. because !false outputs true. !!false outputs false.

FUNCTIONS

function functionName (parameter1, parameter2) {
}

Declaration and invocation.

SCOPE

Javascript is function scoped. NOT block scoped. So if you declare a variable inside of
an if statement block, or a for loop block, it will retain its assigned value, even 'i'
counter does this.

Global variables vs local variables. Scope is the range of accessibility of a variable,
object or function.
Functions can access the variables defined in its parents.

CLOSURE

A function that has referenced variables outside of itself and remembers those variables.

function Person(first, last) {
  function SayName() {
    console.log(first + ' ' + last)
  }
  return SayName;
}

var person = Person("John", "Doe");
person();  <--var person became the function returned from function Person(), ie SayName

log will say John Doe.

WEEK02/DAY01

Javascript's core (most fundamental and most used) data type is the Object data type.
Javascript has one complex data type (the Object data type) and 5 simple (primitive) data types:
Number, String, Boolean, Undefined, and Null.

Simple data types are immutable--cannot be changed. Objects can be changed.

An object is an unordered list of primitive data types. Each item in the list is a property,
except functions in the list, which are methods.

syntax for declaring an object is:

var object = {property1: value1, property2: value2};

Property names can be strings or numbers. It is best to avoid using numbers.
If a property name is a number, it has to be accessed with bracket notation:

var davidMoore = {32: "yes", job: "no"};

console.log(davidMoore.32); //will log an error.
console.log(davidMoore["32"]); //will log yes.

Reference Data Types VS Primitive Data Types

Reference data types store values as a reference, they do not store values directly on the variable as values,
like in primitive data types. So:

var person = "Kobe";
var anotherPerson = person;
person = "Bryant";

console.log(person); //logs Bryant
console.log(anotherPerson); //logs Kobe

This is save-as-value. Whereas:

var person = {name: "Kobe"}
var anotherPerson = person;
person.name = "Bryant";

console.log(anotherPerson.name); //logs Bryant
console.log(person.name); //logs Bryant

This is save-as-reference.

Object Data Properties Have Attributes

data property = object property that stores data.
Each data property has not only the name-value pair, but also three attributes that are
by default set to true.

1. Configurable - Specifies whether the property can be deleted or changed
2. Enumerable - Specifies whether the property can be returned in a for/in loop
3. Writable - Specifies whether the property can be changed

Creating Objects

2 ways:

1. Object Literals

var myObject = {}; //initialized an empty object

var mango = {
  color: "yellow",
  shape: "round",
  sweetness: 8,
  howSweetAmI: function() {
    console.log("Hmm hmm good.");
  }
};

2. Object Constructor

Constructors are functions used to initialize objects.

var mango =  new Object ();
mango.color = "yellow";
mango.shape= "round";
mango.sweetness = 8;
​
mango.howSweetAmI = function () {
console.log("Hmm Hmm Good");
}

//umm i don't understand how the above is an example of a constructor. I'd like to see
what new Object looks like.

Objects can contain arrays, or even other objects.
Although you can used some reserved words such as "for" in your object, it is not advised.

Here is another object literal:

var mangoFruit = {
color: "yellow",
sweetness: 8,
fruitName: "Mango",
nativeToLand: ["South America", "Central America"],
​
​showName: function () {
console.log("This is " + this.fruitName);
},
​nativeTo: function () {
 this.nativeToLand.forEach(function (eachCountry)  {
            console.log("Grown in:" + eachCountry);
        });
}
}

1. Constructor Pattern for Creating Objects

Note: forEach(); function executes a provided function once per item in an Array

And here is a constructor function to make that object (and others like it):

function Fruit (theColor, theSweetness, theFruitName, theNativeToLand) {
​
    this.color = theColor;
    this.sweetness = theSweetness;
    this.fruitName = theFruitName;
    this.nativeToLand = theNativeToLand;
​
    this.showName = function () {
        console.log("This is a " + this.fruitName);
    }
​
    this.nativeTo = function () {
    this.nativeToLand.forEach(function (eachCountry)  {
       console.log("Grown in:" + eachCountry);
        });
    }
}

Then to create the mango object, invoke the constructor function.

var mangoFruit = new Fruit ("Yellow", 8, "Mango", ["South America", "Central America", "West Africa"]);
mangoFruit.showName(); // This is a Mango.​

Note: Capitalize the first letter of constructor functions.

An *inherited* property is one defined on the object's prototype property. For example:

someObject.prototype.firstName = "rich";

//Is a property given to an object by its constructor function inherited or own?

An *own* property is defined directly on the object itself. For example:

var myObject = new ConstructorName();
myObject.myProperty = "A value";

To access a property of an object, use myObject.myProperty;
To invoke a method, use myObject.myMethod();

2. Prototype Pattern for Creating Objects

function Fruit () {
​
}
​
Fruit.prototype.color = "Yellow";
Fruit.prototype.sweetness = 7;
Fruit.prototype.fruitName = "Generic Fruit";
Fruit.prototype.nativeToLand = "USA";
​
Fruit.prototype.showName = function () {
console.log("This is a " + this.fruitName);
}
​
Fruit.prototype.nativeTo = function () {
            console.log("Grown in:" + this.nativeToLand);
}

How to Access Properties of an Object

1. Dot Notation

object.property;

2. Bracket Notation
