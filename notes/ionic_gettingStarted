IONIC NOTES

[1] Install Ionic and Cordova.

$ npm install -g cordova ionic

[2]  Install required platform dependencies.

  [A] Install Cordova Shell Tools (I think this is done. I think this is just Cordova.)

  [B] Install Java Development Kit (JDK)
    JDK 8 or higher. Based on OS. Simple dmg install. >http://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html

  [C] Install the Android SDK

    [a] Download Android Studio or the standalone SDK Tools. I went with Android Studio.
    >https://developer.android.com/sdk/installing/index.html

    [b] Add this line to your ~/.bash_profile, modifying the path depending on the location of your installs:

      export PATH=${PATH}:/Development/android-sdk/platform-tools:/Development/android-sdk/tools

      For example, I put:

      export PATH=${PATH}:/Users/davidmoore/Library/Android/sdk/platform-tools:/Users/davidmoore/Library/Android/sdk/tools

      Then either start a new terminal session, or run

      $ source ~/.bash_profile

    [c] Install SDK packages.

      Open the Android SDK manager.

      $ android

    [d] In addition to the default selections,

      >Inside Tools, select
        >>Android SDK Tools
        >>Android SDK Platform-Tools
        >>Android SDK Build-tools (highest version)
      >Inside Android X.X (newest), select
        >>SDK Platform
        >>Android 5.1.1 (API 22) or newest version.
        >>ARM EABI v7a System Image
      >Inside Extras, select
        >>Google Repository
        >>Google Play Services

[Note: Google Play Services APIs provide a variety of features for your apps, such as user authentication, Google Maps, Google Cast, Games acheivements and leaderboards, and more. Google Play services APIs are not available on all Android-powered devices, but are available on all devices with Google Play Store. To use these APIs in the Android emulator, you must also install the the Google APIs system image from the latest Android X.X directory in the SDK Manager.]

    [e] Click "Install X Packages". Approve the licenses. Click "Install".

  [D] Configure emulator (there is no default emulator)

    [a] Execute < $ android > in terminal.
    [b] Click "Tools", select Manage AVDs.
    [c] Under "Device Definitions", choose any item. Hit Create AVDs.
        [i] Optionally change the name.
        [ii] Target is your SDK platform from Step 2Cd: (Android 5 - API 32 or something).
        [iii] CPU/ABI is your system image ARM Eabi

    [d] Check: You should now be able to run < $ android > to open Android SDK Manager, click "Tools", select "Manage AVDs", choose your device, and hit "Start...", select options, and hit "Launch" to run your emulator.

  [E] You can use Virtual Machine Acceleration to speed up emulator...refer back to instructions: http://cordova.apache.org/docs/en/latest/guide/platforms/android/index.html

[3] Create project (using CLI). You could also use Android-specific shell tools, but those look kinda crazy.

    $ cordova create hello com.example.hello HelloWorld   #creates your project folder
    $ cd hello
    $ cordova platform add android
    $ cordova prepare              # or "cordova build"

[4] Build the Project.

  [A] Navigate to root project folder and execute the following.

    $ cordova build                     #build for all platforms
    $ cordova build android             # build debug only for android. same as
    $ cordova build android --debug
    $ cordova build android --release   #build release only for android

    Throws error. No platforms added. Specify platforms using:

    $ cordova platform add android
    $ cordova platform add ios
    $ cordova platform add amazon-fireos
    $ cordova platform add blackberry10
    $ cordova platform add firefoxos

    There was another error. 'Error: Please install Android target: "android-22"'. Installed Android 5.1.1 (API 22)

[5] Deploy the app. WARNING: This can take forever. Probably why you need the accelerate thing.

  $ cordova emulate android       #to deploy the app on a default android emulator
  $ cordova run android --device  #to deploy the app on a connected device

  This will use your default emulator that we made earlier. Pushes the app to the homescreen and launches it. Use save to snapshot and load from snapshot to save time loading your previously used devices. It will still probably be painfully slow. Luckily, remember earlier we said we could speed it up? Let's do that now.

[6] Open your Android SDK Manager, and select the Intel x86 Atom System Image, for whichever version that you want to test. Then go to Extras and select Intel x86 Emulator Accelerator (HAXM), and install those packages. Navigate to your Android/sdk/extras/intel/ directory and run the Hardware_Accelerated_Execution_Manager

see https://software.intel.com/en-us/android/articles/speeding-up-the-android-emulator-on-intel-architecture
