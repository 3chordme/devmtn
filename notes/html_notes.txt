HTML NOTES

Hyper Text Markup Language

Html allows browsers and search engines to understand the structure of a doc
Provides basic structure for web page content

Goal is to mark up content semantically, or with meaning.

*box model*

content inside padding inside border inside margin. just play with them.
try float property to see how things stack up/push elements around.
if you have sidebar 25% float left and main 75% float right, they will line up
all nice.
clear means ignore floating elements. so footer clear: both will make it go on
the bottom?

in padding/margins etc. (my original) mnemonic for remembering order of values is
TRue BLue or TeRriBLe or TRouBLe
Top Right Bottom Left

<div> should only be used when there are no tags that are more meaningful, such as <nav>
<article> <header> <section><footer><aside></article>

<head> is for document metadata

shortcuts:
save as html, hit exclamation point tab in atoms
in brackets, type html then hit tab.
in atom, type the tag/element and hit tab, auto populates
install emmett in atom plugins

html element reference from mdn
use mdn to prefix all of your development questions in google

-Position property has 5 values:

static - default. top/right/bottom/left/z-index don't affect it. the element will stick to the normal page flow.
relative - an element's original position remains in the flow of the document, just like static, but now TRBLZ "nudge"
the element from its original position in that direction.
absolute - the element is removed from the flow of the document and other elements will behave as if it is not even there,
and TRBLZ work on it.
fixed - the element is removed from the flow of the doc and other elements ignore it, just like in absolute, but its position
is always relative to the document (window?), not any partifular parent, and it is unaffected by scrolling.
inherit - the position property doesn't cascade, so this can be used to force it to, and inherit its position value
from its parent.
and apparently sticky? but that is new so forget it.

Here's another way to think of it:
Relative position allows you to position elements relative to where they would have been in the document flow.
Absolute position allows you to position elements relative to their parent container.
  The containing block is the nearest ancestor block (parents are ancestors too(?)) that has any position != static.
  So if the child is position: absolute, set the parent to position: <something> or it will be ignored.
Relative plays nice, like family (who pays attention). Absolute messes things up, like a dictator (who gets ignored)

Fixed is just like absolute, aka ignored, but it's ALWAYS relative to the browser window, even when you scroll.

Inline elements are friendly, and only take up the min space needed. Looks like they also kind of loop to the next line?
Block elements are blockheads, they take up the whole line and force the next element a line down.
Looks like inline-block shares the line until one won't fit, then pushes the whole element down to the next line?

div is block by default
span is inline by default
input button is inline-block by default

-Overflow property

visible- default. The overflow is not clipped, and will be rendered outside of the element's box.
hidden - the overflow is clipped, and the rest of the content is not visible.
scroll- the overflow is clipped, but a scrollbar is added to view the rest of the content.
auto - IF the overflow is clipped, a scrollbar is added to view the rest of the content.
